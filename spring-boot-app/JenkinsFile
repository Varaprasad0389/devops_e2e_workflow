pipeline {
    agent any
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-credentials') // GCP JSON key stored as a secret
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checking out repository..."'
                git branch: 'main', url: 'https://github.com/Varaprasad0389/devops_e2e_workflow.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'echo "Listing files before build:"'
                sh 'ls -ltr'
                sh '''
                    echo "Building Spring Boot Application..."
                    cd spring-boot-app
                    mvn clean package -DskipTests
                '''
            }
        }

        stage('Maven Build & Test') {
            steps {
                dir('spring-boot-app') {
                    sh '''
                        echo "Running Maven Build & Tests (Tests Skipped)..."

                        echo "Compiling Code..."
                        mvn clean compile -DskipTests

                        echo "Running Unit Tests (Skipped)..."
                        mvn test -DskipTests

                        echo "Running Integration Tests (Skipped)..."
                        mvn verify -DskipTests
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "varaprasad365/end2endbuild:${BUILD_NUMBER}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-cred1', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        // Debugging: Print out Docker credentials (sensitive information omitted in real use)
                        echo "Building Docker Image..."
                        echo "DOCKER_USER: ${DOCKER_USER}"  // Ensure the user is correct (do not expose passwords)
                        
                        // Build Docker image
                        dir('spring-boot-app') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }

                        // Log into DockerHub
                        echo "Logging into DockerHub..."
                        sh """
                            echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
                        """

                        // Push Docker image
                        echo "Pushing Docker Image..."
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
    }
}
