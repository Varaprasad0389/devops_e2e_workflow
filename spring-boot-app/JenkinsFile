pipeline {
    agent any 
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('devopse2e') // GCP JSON key stored as a secret
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checking out repository..."'
                git branch: 'main', url: 'https://github.com/hindusree444/devops_e2e_workflow.git'
            }
        }

        stage('Authenticate with GCP') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        echo "Authenticating with Google Cloud..."
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud auth list
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform plan
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Build and Test') {
            steps {
                sh 'echo "Listing files before build:"'
                sh 'ls -ltr'
                sh '''
                    echo "Building Spring Boot Application..."
                    cd spring-boot-app
                    mvn clean package
                '''
            }
        }

        /* Uncomment this section if SonarQube is required
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://34.201.116.83:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
                    '''
                }
            }
        }
        */

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "hindusreedunaboyina/e2ebuild:${BUILD_NUMBER}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        // Debugging: Print out Docker credentials (sensitive information omitted in real use)
                        echo "Building Docker Image..."
                        echo "DOCKER_USER: ${DOCKER_USER}"  // Ensure the user is correct (do not expose passwords)
                        echo "DOCKER_PASS: ${DOCKER_PASS[0..3]}..."  // Only print partial password for debugging
                        
                        // Build Docker image
                        dir('spring-boot-app') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }

                        // Log into DockerHub
                        echo "Logging into DockerHub..."
                        sh """
                            echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
                        """

                        // Push Docker image
                        echo "Pushing Docker Image..."
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
    }
}
