pipeline {
  agent any 
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/hindusree444/devops_e2e_workflow.git'
      }
    }
    stage('Terraform Init') {
      steps {
        sh 'cd spring-boot-app/terraform && terraform init'
      }
    }
    stage('Terraform Plan') {
      steps {
        sh 'cd spring-boot-app/terraform && terraform plan'
      }
    }

    stage('Terraform Apply') {
      steps {
        sh 'cd spring-boot-app/terraform && terraform apply -auto-approve'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    /*stage('Static Code Analysis') {
      environment {
      SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }*/
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "hindusreedunaboyina/e2ebuild:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "devops_e2e_workflow/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
  }
}
